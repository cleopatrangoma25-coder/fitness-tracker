name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.13.1

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Turborepo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Lint and type check
        run: pnpm exec turbo run lint typecheck

      - name: Build
        run: pnpm exec turbo run build

      - name: Unit Tests
        run: pnpm exec turbo run test

      - name: E2E Tests
        run: |
          cd apps/web
          pnpm test:e2e
        env:
          CI: true

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT: fitness-tracker-dev-4499e

      - name: Deploy to Staging
        run: |
          firebase use development
          firebase deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Notify Staging Deployment
        run: |
          echo "‚úÖ Staging deployment completed!"
          echo "üåê URL: https://fitness-tracker-dev-4499e.web.app"

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT: fitness-tracker-11c7a

      - name: Deploy to Production
        run: |
          firebase use production
          firebase deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ Production deployment completed!
            
            **Changes:**
            - Automated deployment from main branch
            - All tests passed
            - Build successful
            
            **Environment:**
            - Production: https://fitness-tracker-11c7a.web.app
            - Staging: https://fitness-tracker-dev-4499e.web.app
            
            **Monitoring:**
            - Health checks: /health, /ready, /live
            - Error monitoring: Check Firebase Console
          draft: false
          prerelease: false

      - name: Notify Production Deployment
        run: |
          echo "üéâ Production deployment completed!"
          echo "üåê URL: https://fitness-tracker-11c7a.web.app"
          echo "üìä Monitor: https://console.firebase.google.com/project/fitness-tracker-11c7a" 