import { useState } from 'react'
import { Button, Card, Input } from '@fitness-tracker/ui'
import { trpc } from '../../lib/trpc'

export function TrpcExample() {
  const [goalTitle, setGoalTitle] = useState('')
  const [goalTarget, setGoalTarget] = useState('')

  // tRPC queries and mutations
  const { data: userProfile, isLoading: profileLoading } = trpc.user.getProfile.useQuery()
  const { data: activeGoals, isLoading: goalsLoading } = trpc.goal.listActive.useQuery()
  const { data: workouts, isLoading: workoutsLoading } = trpc.workout.list.useQuery({ limit: 5 })

  // Mutations
  const createGoalMutation = trpc.goal.create.useMutation({
    onSuccess: () => {
      // Refetch goals after creating a new one
      utils.goal.listActive.invalidate()
      setGoalTitle('')
      setGoalTarget('')
    },
  })

  const updateProfileMutation = trpc.user.updateProfile.useMutation({
    onSuccess: () => {
      // Refetch profile after updating
      utils.user.getProfile.invalidate()
    },
  })

  const utils = trpc.useUtils()

  const handleCreateGoal = () => {
    if (!goalTitle || !goalTarget) return

    createGoalMutation.mutate({
      id: '', // Will be generated by Firestore
      userId: '', // Will be set by the server
      type: 'WEIGHT',
      title: goalTitle,
      targetValue: parseFloat(goalTarget),
      unit: 'kg',
      startDate: new Date(),
      currentValue: 0,
      status: 'ACTIVE',
      createdAt: new Date(),
      updatedAt: new Date(),
    })
  }

  const handleUpdateProfile = () => {
    updateProfileMutation.mutate({
      displayName: 'Updated via tRPC',
    })
  }

  if (profileLoading || goalsLoading || workoutsLoading) {
    return (
      <Card className="p-6">
        <div className="text-center">Loading...</div>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      <Card className="p-6">
        <h2 className="text-2xl font-bold mb-4">tRPC Example</h2>
        
        {/* User Profile Section */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">User Profile</h3>
          {userProfile ? (
            <div className="bg-gray-50 p-4 rounded">
              <p><strong>Name:</strong> {(userProfile as any).displayName}</p>
              <p><strong>Email:</strong> {(userProfile as any).email}</p>
              <p><strong>Role:</strong> {(userProfile as any).role}</p>
            </div>
          ) : (
            <p className="text-gray-500">No profile data</p>
          )}
          <Button 
            onClick={handleUpdateProfile}
            disabled={updateProfileMutation.isPending}
            className="mt-2"
          >
            {updateProfileMutation.isPending ? 'Updating...' : 'Update Profile'}
          </Button>
        </div>

        {/* Active Goals Section */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">Active Goals</h3>
          {activeGoals && activeGoals.length > 0 ? (
            <div className="space-y-2">
              {activeGoals.map((goal: any) => (
                <div key={goal.id} className="bg-gray-50 p-3 rounded">
                  <p><strong>{goal.title}</strong></p>
                  <p>Progress: {goal.currentValue} / {goal.targetValue} {goal.unit}</p>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500">No active goals</p>
          )}
        </div>

        {/* Create Goal Form */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">Create New Goal</h3>
          <div className="space-y-2">
            <Input
              placeholder="Goal title"
              value={goalTitle}
              onChange={(e) => setGoalTitle(e.target.value)}
            />
            <Input
              placeholder="Target value"
              type="number"
              value={goalTarget}
              onChange={(e) => setGoalTarget(e.target.value)}
            />
            <Button 
              onClick={handleCreateGoal}
              disabled={createGoalMutation.isPending || !goalTitle || !goalTarget}
            >
              {createGoalMutation.isPending ? 'Creating...' : 'Create Goal'}
            </Button>
          </div>
        </div>

        {/* Recent Workouts Section */}
        <div>
          <h3 className="text-lg font-semibold mb-2">Recent Workouts</h3>
          {workouts && workouts.length > 0 ? (
            <div className="space-y-2">
              {workouts.map((workout: any) => (
                <div key={workout.id} className="bg-gray-50 p-3 rounded">
                  <p><strong>{workout.name}</strong></p>
                  <p>Duration: {workout.durationMinutes} minutes</p>
                  <p>Date: {new Date(workout.date).toLocaleDateString()}</p>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500">No recent workouts</p>
          )}
        </div>
      </Card>
    </div>
  )
} 